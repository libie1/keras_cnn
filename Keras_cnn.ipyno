{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    }
   ],
   "source": [
    "# 필요한 라이브러리들\n",
    "import os,cv2\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from sklearn.utils import shuffle\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "from keras import backend as K\n",
    "K.set_image_dim_ordering('tf')\n",
    "\n",
    "from keras.utils import np_utils\n",
    "from keras.models import Sequential\n",
    "from keras.layers.core import Dense, Dropout, Activation, Flatten\n",
    "from keras.layers.convolutional import Conv2D, MaxPooling2D\n",
    "from keras.optimizers import SGD,RMSprop,adam\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loaded the images of dataset-cats\n",
      "\n",
      "Loaded the images of dataset-dogs\n",
      "\n",
      "Loaded the images of dataset-horses\n",
      "\n",
      "Loaded the images of dataset-Humans\n",
      "\n",
      "(808, 128, 128)\n",
      "(808, 128, 128, 1)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/lib/python3.6/site-packages/ipykernel_launcher.py:34: DeprecationWarning: Both axis > a.ndim and axis < -a.ndim - 1 are deprecated and will raise an AxisError in the future.\n"
     ]
    }
   ],
   "source": [
    "PATH = os.getcwd()\n",
    "\n",
    "# data가 어디있는지 \n",
    "data_path = PATH + '/data'\n",
    "data_dir_list = os.listdir(data_path)\n",
    "\n",
    "\n",
    "img_rows=128\n",
    "img_cols=128\n",
    "num_channel=1 #rgb 데이터라면 num_channel을 3으로 설정\n",
    "num_epoch=10\n",
    "\n",
    "# class 개수\n",
    "num_classes = 4\n",
    "img_data_list=[]\n",
    "\n",
    "for dataset in data_dir_list:\n",
    "\timg_list=os.listdir(data_path+'/'+ dataset)\n",
    "\tprint ('Loaded the images of dataset-'+'{}\\n'.format(dataset))\n",
    "\tfor img in img_list:\n",
    "\t\tinput_img=cv2.imread(data_path + '/'+ dataset + '/'+ img )\n",
    "\t\tinput_img=cv2.cvtColor(input_img, cv2.COLOR_BGR2GRAY)\n",
    "\t\tinput_img_resize=cv2.resize(input_img,(img_rows,img_cols))\n",
    "\t\timg_data_list.append(input_img_resize)\n",
    "\n",
    "        \n",
    "img_data = np.array(img_data_list)\n",
    "img_data = img_data.astype('float32')\n",
    "img_data /= 255\n",
    "print (img_data.shape)\n",
    "\n",
    "\n",
    "if num_channel==1: #데이터 형태를 4개의 원소로 가지게 해야됨\n",
    "\t\timg_data= np.expand_dims(img_data, axis=4) \n",
    "\t\tprint (img_data.shape)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "num_of_samples = img_data.shape[0]\n",
    "labels = np.ones((num_of_samples,),dtype='int64')\n",
    "\n",
    "labels[0:202]=0\n",
    "labels[202:404]=1\n",
    "labels[404:606]=2\n",
    "labels[606:]=3\n",
    "\t  \n",
    "names = ['cats','dogs','horses','humans']\n",
    "\t  \n",
    "# one-hot encoding\n",
    "Y = np_utils.to_categorical(labels, num_classes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "#Shuffle the dataset\n",
    "x,y = shuffle(img_data,Y, random_state=2)\n",
    "# Split the dataset\n",
    "X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=2)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(128, 128, 1)\n"
     ]
    }
   ],
   "source": [
    "input_shape=img_data[0].shape\n",
    "print(input_shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "#%%\n",
    "# Defining the model\n",
    "input_shape=img_data[0].shape\n",
    "\t\t\t\t\t\n",
    "model = Sequential()\n",
    "\n",
    "\n",
    "model.add(Conv2D(32, (3,3),padding='same',input_shape=input_shape))\n",
    "\n",
    "model.add(Activation('relu'))\n",
    "model.add(Conv2D(32, (3, 3)))\n",
    "model.add(Activation('relu'))\n",
    "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "model.add(Dropout(0.5))\n",
    "\n",
    "model.add(Conv2D(64, (3, 3)))\n",
    "model.add(Activation('relu'))\n",
    "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "model.add(Dropout(0.5))\n",
    "\n",
    "model.add(Flatten())\n",
    "model.add(Dense(64))\n",
    "model.add(Activation('relu'))\n",
    "model.add(Dropout(0.5))\n",
    "model.add(Dense(num_classes))\n",
    "model.add(Activation('softmax'))\n",
    "\n",
    "model.compile(loss='categorical_crossentropy', optimizer='rmsprop',metrics=[\"accuracy\"])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "conv2d_4 (Conv2D)            (None, 128, 128, 32)      320       \n",
      "_________________________________________________________________\n",
      "activation_6 (Activation)    (None, 128, 128, 32)      0         \n",
      "_________________________________________________________________\n",
      "conv2d_5 (Conv2D)            (None, 126, 126, 32)      9248      \n",
      "_________________________________________________________________\n",
      "activation_7 (Activation)    (None, 126, 126, 32)      0         \n",
      "_________________________________________________________________\n",
      "max_pooling2d_3 (MaxPooling2 (None, 63, 63, 32)        0         \n",
      "_________________________________________________________________\n",
      "dropout_4 (Dropout)          (None, 63, 63, 32)        0         \n",
      "_________________________________________________________________\n",
      "conv2d_6 (Conv2D)            (None, 61, 61, 64)        18496     \n",
      "_________________________________________________________________\n",
      "activation_8 (Activation)    (None, 61, 61, 64)        0         \n",
      "_________________________________________________________________\n",
      "max_pooling2d_4 (MaxPooling2 (None, 30, 30, 64)        0         \n",
      "_________________________________________________________________\n",
      "dropout_5 (Dropout)          (None, 30, 30, 64)        0         \n",
      "_________________________________________________________________\n",
      "flatten_2 (Flatten)          (None, 57600)             0         \n",
      "_________________________________________________________________\n",
      "dense_3 (Dense)              (None, 64)                3686464   \n",
      "_________________________________________________________________\n",
      "activation_9 (Activation)    (None, 64)                0         \n",
      "_________________________________________________________________\n",
      "dropout_6 (Dropout)          (None, 64)                0         \n",
      "_________________________________________________________________\n",
      "dense_4 (Dense)              (None, 4)                 260       \n",
      "_________________________________________________________________\n",
      "activation_10 (Activation)   (None, 4)                 0         \n",
      "=================================================================\n",
      "Total params: 3,714,788\n",
      "Trainable params: 3,714,788\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n",
      "Train on 646 samples, validate on 162 samples\n",
      "Epoch 1/10\n",
      "646/646 [==============================] - 21s - loss: 1.7338 - acc: 0.2446 - val_loss: 1.3869 - val_acc: 0.2407\n",
      "Epoch 2/10\n",
      "646/646 [==============================] - 21s - loss: 1.3458 - acc: 0.3684 - val_loss: 1.3420 - val_acc: 0.3519\n",
      "Epoch 3/10\n",
      "646/646 [==============================] - 21s - loss: 1.2120 - acc: 0.4644 - val_loss: 1.2124 - val_acc: 0.4444\n",
      "Epoch 4/10\n",
      "646/646 [==============================] - 21s - loss: 1.0923 - acc: 0.5542 - val_loss: 1.2403 - val_acc: 0.4383\n",
      "Epoch 5/10\n",
      "646/646 [==============================] - 21s - loss: 0.9428 - acc: 0.6053 - val_loss: 1.1646 - val_acc: 0.5123\n",
      "Epoch 6/10\n",
      "646/646 [==============================] - 21s - loss: 0.8376 - acc: 0.6997 - val_loss: 1.1542 - val_acc: 0.5000\n",
      "Epoch 7/10\n",
      "646/646 [==============================] - 21s - loss: 0.7351 - acc: 0.7198 - val_loss: 1.2869 - val_acc: 0.4321\n",
      "Epoch 8/10\n",
      "646/646 [==============================] - 21s - loss: 0.5830 - acc: 0.7802 - val_loss: 1.2471 - val_acc: 0.4630\n",
      "Epoch 9/10\n",
      "646/646 [==============================] - 21s - loss: 0.5247 - acc: 0.8065 - val_loss: 1.2102 - val_acc: 0.5123\n",
      "Epoch 10/10\n",
      "646/646 [==============================] - 22s - loss: 0.4402 - acc: 0.8437 - val_loss: 1.3787 - val_acc: 0.5247\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# Viewing model_configuration\n",
    "\n",
    "model.summary()\n",
    "model.get_config()\n",
    "model.layers[0].get_config()\n",
    "model.layers[0].input_shape\t\t\t\n",
    "model.layers[0].output_shape\t\t\t\n",
    "model.layers[0].get_weights()\n",
    "np.shape(model.layers[0].get_weights()[0])\n",
    "model.layers[0].trainable\n",
    "\n",
    "#%%\n",
    "# Training\n",
    "hist = model.fit(X_train, y_train, batch_size=16, epochs=num_epoch, verbose=1, validation_data=(X_test, y_test))\n",
    "\n",
    "#hist = model.fit(X_train, y_train, batch_size=32, nb_epoch=20,verbose=1, validation_split=0.2)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\nojYeABgvbvTBkirVAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7effb539a400>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7effb52c4828>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# visualizing losses and accuracy\n",
    "train_loss=hist.history['loss']\n",
    "val_loss=hist.history['val_loss']\n",
    "train_acc=hist.history['acc']\n",
    "val_acc=hist.history['val_acc']\n",
    "xc=range(num_epoch)\n",
    "\n",
    "plt.figure(1,figsize=(7,5))\n",
    "plt.plot(xc,train_loss)\n",
    "plt.plot(xc,val_loss)\n",
    "plt.xlabel('num of Epochs')\n",
    "plt.ylabel('loss')\n",
    "plt.title('train_loss vs val_loss')\n",
    "plt.grid(True)\n",
    "plt.legend(['train','val'])\n",
    "#print plt.style.available # use bmh, classic,ggplot for big pictures\n",
    "plt.style.use(['classic'])\n",
    "\n",
    "plt.figure(2,figsize=(7,5))\n",
    "plt.plot(xc,train_acc)\n",
    "plt.plot(xc,val_acc)\n",
    "plt.xlabel('num of Epochs')\n",
    "plt.ylabel('accuracy')\n",
    "plt.title('train_acc vs val_acc')\n",
    "plt.grid(True)\n",
    "plt.legend(['train','val'],loc=4)\n",
    "#print plt.style.available # use bmh, classic,ggplot for big pictures\n",
    "plt.style.use(['classic'])\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#%%\n",
    "# Evaluating the model\n",
    "\n",
    "score = model.evaluate(X_test, y_test,  verbose=0)\n",
    "print('Test Loss:', score[0])\n",
    "print('Test accuracy:', score[1])\n",
    "\n",
    "test_image = X_test[7:8]\n",
    "print (test_image.shape)\n",
    "\n",
    "print(model.predict(test_image))\n",
    "print(model.predict_classes(test_image))\n",
    "print(y_test[7:8])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Testing a new image\n",
    "test_image = cv2.imread('data/horses/horse-106.jpg')\n",
    "#test_image=cv2.cvtColor(test_image, cv2.COLOR_BGR2GRAY)\n",
    "test_image=cv2.resize(test_image,(128,128))\n",
    "test_image = np.array(test_image)\n",
    "test_image = test_image.astype('float32')\n",
    "test_image /= 255\n",
    "print (test_image.shape)\n",
    "   \n",
    "if num_channel==1:\n",
    "\tif K.image_dim_ordering()=='th':\n",
    "\t\ttest_image= np.expand_dims(test_image, axis=0)\n",
    "\t\ttest_image= np.expand_dims(test_image, axis=0)\n",
    "\t\tprint (test_image.shape)\n",
    "\telse:\n",
    "\t\ttest_image= np.expand_dims(test_image, axis=3) \n",
    "\t\ttest_image= np.expand_dims(test_image, axis=0)\n",
    "\t\tprint (test_image.shape)\n",
    "\t\t\n",
    "else:\n",
    "\tif K.image_dim_ordering()=='th':\n",
    "\t\ttest_image=np.rollaxis(test_image,2,0)\n",
    "\t\ttest_image= np.expand_dims(test_image, axis=0)\n",
    "\t\tprint (test_image.shape)\n",
    "\telse:\n",
    "\t\ttest_image= np.expand_dims(test_image, axis=0)\n",
    "\t\tprint (test_image.shape)\n",
    "\t\t\n",
    "# Predicting the test image\n",
    "print((model.predict(test_image)))\n",
    "print(model.predict_classes(test_image))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Visualizing the intermediate layer\n",
    "\n",
    "#\n",
    "def get_featuremaps(model, layer_idx, X_batch):\n",
    "\tget_activations = K.function([model.layers[0].input, K.learning_phase()],[model.layers[layer_idx].output,])\n",
    "\tactivations = get_activations([X_batch,0])\n",
    "\treturn activations\n",
    "\n",
    "layer_num=1\n",
    "filter_num=4\n",
    "\n",
    "activations = get_featuremaps(model, int(layer_num),test_image)\n",
    "\n",
    "print (np.shape(activations))\n",
    "feature_maps = activations[0][0]      \n",
    "print (np.shape(feature_maps))\n",
    "\n",
    "if K.image_dim_ordering()=='th':\n",
    "\tfeature_maps=np.rollaxis((np.rollaxis(feature_maps,2,0)),2,0)\n",
    "print (feature_maps.shape)\n",
    "\n",
    "fig=plt.figure(figsize=(16,16))\n",
    "plt.imshow(feature_maps[:,:,filter_num],cmap='gray')\n",
    "plt.savefig(\"featuremaps-layer-{}\".format(layer_num) + \"-filternum-{}\".format(filter_num)+'.jpg')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "num_of_featuremaps=feature_maps.shape[2]\n",
    "fig=plt.figure(figsize=(16,16))\t\n",
    "plt.title(\"featuremaps-layer-{}\".format(layer_num))\n",
    "subplot_num=int(np.ceil(np.sqrt(num_of_featuremaps)))\n",
    "for i in range(int(num_of_featuremaps)):\n",
    "\tax = fig.add_subplot(subplot_num, subplot_num, i+1)\n",
    "\t#ax.imshow(output_image[0,:,:,i],interpolation='nearest' ) #to see the first filter\n",
    "\tax.imshow(feature_maps[:,:,i],cmap='gray')\n",
    "\tplt.xticks([])\n",
    "\tplt.yticks([])\n",
    "\tplt.tight_layout()\n",
    "plt.show()\n",
    "fig.savefig(\"featuremaps-layer-{}\".format(layer_num) + '.jpg')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "#%%\n",
    "# Printing the confusion matrix\n",
    "from sklearn.metrics import classification_report,confusion_matrix\n",
    "import itertools\n",
    "\n",
    "Y_pred = model.predict(X_test)\n",
    "print(Y_pred)\n",
    "y_pred = np.argmax(Y_pred, axis=1)\n",
    "print(y_pred)\n",
    "#y_pred = model.predict_classes(X_test)\n",
    "#print(y_pred)\n",
    "target_names = ['class 0(cats)', 'class 1(Dogs)', 'class 2(Horses)','class 3(Humans)']\n",
    "\t\t\t\t\t\n",
    "print(classification_report(np.argmax(y_test,axis=1), y_pred,target_names=target_names))\n",
    "\n",
    "print(confusion_matrix(np.argmax(y_test,axis=1), y_pred))\n",
    "\n",
    "\n",
    "# Plotting the confusion matrix\n",
    "def plot_confusion_matrix(cm, classes,\n",
    "                          normalize=False,\n",
    "                          title='Confusion matrix',\n",
    "                          cmap=plt.cm.Blues):\n",
    "    \"\"\"\n",
    "    This function prints and plots the confusion matrix.\n",
    "    Normalization can be applied by setting `normalize=True`.\n",
    "    \"\"\"\n",
    "    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n",
    "    plt.title(title)\n",
    "    plt.colorbar()\n",
    "    tick_marks = np.arange(len(classes))\n",
    "    plt.xticks(tick_marks, classes, rotation=45)\n",
    "    plt.yticks(tick_marks, classes)\n",
    "\n",
    "    if normalize:\n",
    "        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]\n",
    "        print(\"Normalized confusion matrix\")\n",
    "    else:\n",
    "        print('Confusion matrix, without normalization')\n",
    "\n",
    "    print(cm)\n",
    "\n",
    "    thresh = cm.max() / 2.\n",
    "    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n",
    "        plt.text(j, i, cm[i, j],\n",
    "                 horizontalalignment=\"center\",\n",
    "                 color=\"white\" if cm[i, j] > thresh else \"black\")\n",
    "\n",
    "    plt.tight_layout()\n",
    "    plt.ylabel('True label')\n",
    "    plt.xlabel('Predicted label')\n",
    "\n",
    "# Compute confusion matrix\n",
    "cnf_matrix = (confusion_matrix(np.argmax(y_test,axis=1), y_pred))\n",
    "\n",
    "np.set_printoptions(precision=2)\n",
    "\n",
    "plt.figure()\n",
    "\n",
    "# Plot non-normalized confusion matrix\n",
    "plot_confusion_matrix(cnf_matrix, classes=target_names,\n",
    "                      title='Confusion matrix')\n",
    "#plt.figure()\n",
    "# Plot normalized confusion matrix\n",
    "#plot_confusion_matrix(cnf_matrix, classes=target_names, normalize=True,\n",
    "#                      title='Normalized confusion matrix')\n",
    "#plt.figure()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#%%\n",
    "# Saving and loading model and weights\n",
    "from keras.models import model_from_json\n",
    "from keras.models import load_model\n",
    "\n",
    "model.save('model.hdf5')\n",
    "loaded_model=load_model('model.hdf5')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# Training with callbacks\n",
    "from keras import callbacks\n",
    "\n",
    "filename='model_train_new.csv'\n",
    "csv_log=callbacks.CSVLogger(filename, separator=',', append=False)\n",
    "\n",
    "early_stopping=callbacks.EarlyStopping(monitor='val_loss', min_delta=0, patience=0, verbose=0, mode='min')\n",
    "\n",
    "filepath=\"Best-weights-my_model-{epoch:03d}-{loss:.4f}-{acc:.4f}.hdf5\"\n",
    "\n",
    "checkpoint = callbacks.ModelCheckpoint(filepath, monitor='val_loss', verbose=1, save_best_only=True, mode='min')\n",
    "\n",
    "callbacks_list = [csv_log,early_stopping,checkpoint]\n",
    "\n",
    "hist = model.fit(X_train, y_train, batch_size=16, epochs=num_epoch, verbose=1, validation_data=(X_test, y_test),callbacks=callbacks_list)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "#%%\n",
    "num_of_featuremaps=feature_maps.shape[2]\n",
    "fig=plt.figure(figsize=(16,16))\t\n",
    "plt.title(\"featuremaps-layer-{}\".format(layer_num))\n",
    "subplot_num=int(np.ceil(np.sqrt(num_of_featuremaps)))\n",
    "for i in range(int(num_of_featuremaps)):\n",
    "\tax = fig.add_subplot(subplot_num, subplot_num, i+1)\n",
    "\t#ax.imshow(output_image[0,:,:,i],interpolation='nearest' ) #to see the first filter\n",
    "\tax.imshow(feature_maps[:,:,i],cmap='gray')\n",
    "\tplt.xticks([])\n",
    "\tplt.yticks([])\n",
    "\tplt.tight_layout()\n",
    "plt.show()\n",
    "fig.savefig(\"featuremaps-layer-{}\".format(layer_num) + '.jpg')\n",
    "\n",
    "\n",
    "#%%\n",
    "# Saving and loading model and weights\n",
    "from keras.models import model_from_json\n",
    "from keras.models import load_model\n",
    "\n",
    "# serialize model to JSON\n",
    "model_json = model.to_json()\n",
    "with open(\"model.json\", \"w\") as json_file:\n",
    "    json_file.write(model_json)\n",
    "# serialize weights to HDF5\n",
    "model.save_weights(\"model.h5\")\n",
    "print(\"Saved model to disk\")\n",
    "\n",
    "# load json and create model\n",
    "json_file = open('model.json', 'r')\n",
    "loaded_model_json = json_file.read()\n",
    "json_file.close()\n",
    "loaded_model = model_from_json(loaded_model_json)\n",
    "# load weights into new model\n",
    "loaded_model.load_weights(\"model.h5\")\n",
    "print(\"Loaded model from disk\")\n",
    "\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
